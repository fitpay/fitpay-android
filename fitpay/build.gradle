buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven'
apply plugin: 'jacoco-android'


group = 'com.fitpay.android'
version = '1.1.1'
archivesBaseName = "android_sdk"

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'file://' + new File(System.getProperty('user.home'), 'LocalRepository').absolutePath) {
            }

            snapshotRepository(url: 'file://' + new File(System.getProperty('user.home'), 'LocalRepository/snapshots').absolutePath) {
            }

            pom.project {
                name 'android_sdk'
                packaging 'aar'
                description 'FitPay Android SDK'
                url 'https://github.com/fitpay/fitpay-android-sdk'

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/fitpay/fitpay-android-sdk/blob/develop/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'fitpay_developer'
                        name 'FitPay Developer'
                        email 'sdk@fit-pay.com'
                    }
                }
            }
        }
    }
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.2'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    buildTypes.each {
        it.buildConfigField "String", 'SDK_VERSION', "\"ANDROID-" + version + "\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}

ext {
    supportLib = "27.1.1"
    retrofitLib = "2.3.0"
    okhttpLib = "3.9.0"
    rxjavaLib = "1.3.8"
}

configurations {
    javadocDeps
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:support-annotations:${supportLib}"
    implementation "com.android.support:appcompat-v7:${supportLib}"

    implementation "com.squareup.retrofit2:retrofit:${retrofitLib}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitLib}"

    implementation "com.squareup.okhttp3:logging-interceptor:${okhttpLib}"
    implementation "com.squareup.okhttp3:okhttp:${okhttpLib}"

    implementation "io.reactivex:rxjava:${rxjavaLib}"
    implementation 'io.reactivex:rxandroid:1.2.1'

    implementation 'me.alexrs:prefs:1.1.0'

    implementation 'org.conscrypt:conscrypt-android:1.2.0'
    implementation 'com.nimbusds:nimbus-jose-jwt:6.0.2'

    implementation 'com.github.heremaps:oksse:0.9.0'

    javadocDeps "com.android.support:support-annotations:${supportLib}"
    javadocDeps "com.squareup.retrofit2:retrofit:${retrofitLib}"
    javadocDeps "com.squareup.retrofit2:converter-gson:${retrofitLib}"
    javadocDeps "com.squareup.okhttp3:logging-interceptor:${okhttpLib}"
    javadocDeps "com.squareup.okhttp3:okhttp:${okhttpLib}"
    javadocDeps "io.reactivex:rxjava:${rxjavaLib}"
    javadocDeps 'me.alexrs:prefs:1.1.0'
    javadocDeps 'org.conscrypt:conscrypt-android:1.2.0'
    javadocDeps 'com.nimbusds:nimbus-jose-jwt:6.0.2'

    testImplementation 'org.mockito:mockito-core:2.21.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jmockit:jmockit:1.37'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs

    classpath += configurations.compile
    classpath += configurations.javadocDeps
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    // exclude generated files
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

afterEvaluate {
    generateJavadocs.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompiler.classpath.files
    })
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}
generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

bintray {
    Properties properties = new Properties()
    File propertiesFile = project.rootProject.file('bintray.properties')
    if(propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
        user = properties.getProperty("bintray_user")
        key = properties.getProperty("bintray_key")

        pkg {
            repo = 'maven'
            name = 'com.fitpay'
            userOrg = 'fit-pay'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/fitpay/fitpay-android-sdk.git'
        }
        configurations = ['archives']
    }
}

// Test Logging
tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}
