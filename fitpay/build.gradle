buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'digital.wup.android-maven-publish' version '3.6.2'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'jacoco-android'

group = 'com.fitpay.android'
version = '1.7.0'
archivesBaseName = "android_sdk"

//required for ./gradlew publishToMavenLocal
def pomConfig = {
    licenses {
        license {
            name 'MIT License'
            url 'https://github.com/fitpay/fitpay-android-sdk/blob/develop/LICENSE'
        }
    }

    developers {
        developer {
            id 'fitpay_developer'
            name 'FitPay Developer'
            email 'sdk@fit-pay.com'
        }
    }
}
publishing {
    publications {
        mavenAar(MavenPublication) {
            from components.android
            groupId = group
            artifactId = archivesBaseName
            version = version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'FitPay Android SDK')
                root.appendNode('name', archivesBaseName)
                root.appendNode('url', 'https://github.com/fitpay/fitpay-android-sdk')
                root.children().last() + pomConfig
            }
        }
    }
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    buildTypes.each {
        it.buildConfigField "String", 'SDK_VERSION', "\"ANDROID-" + version + "\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}

ext {
    android_x_lib = "1.0.2"
    retrofitLib = "2.5.0"
    okhttpLib = "3.14.1"
    rxjavaLib = "2.2.8"
    conscrypt = "2.1.0"
    nimbus = "7.1"
}

configurations {
    javadocDeps
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.annotation:annotation:${android_x_lib}"
    implementation "androidx.appcompat:appcompat:${android_x_lib}"

    api "com.squareup.retrofit2:retrofit:${retrofitLib}"
    api "com.squareup.retrofit2:converter-gson:${retrofitLib}"
    api "com.squareup.okhttp3:okhttp:${okhttpLib}"
    api "com.squareup.okhttp3:logging-interceptor:${okhttpLib}"

    api "io.reactivex.rxjava2:rxjava:${rxjavaLib}"
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'

    api 'me.alexrs:prefs:1.1.0'

    implementation "org.conscrypt:conscrypt-android:${conscrypt}"
    implementation "com.nimbusds:nimbus-jose-jwt:${nimbus}"

    api 'com.github.heremaps:oksse:0.9.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    javadocDeps "androidx.annotation:annotation:${android_x_lib}"
    javadocDeps "com.squareup.retrofit2:retrofit:${retrofitLib}"
    javadocDeps "com.squareup.retrofit2:converter-gson:${retrofitLib}"
    javadocDeps "com.squareup.okhttp3:logging-interceptor:${okhttpLib}"
    javadocDeps "com.squareup.okhttp3:okhttp:${okhttpLib}"
    javadocDeps "io.reactivex.rxjava2:rxjava:${rxjavaLib}"
    javadocDeps 'me.alexrs:prefs:1.1.0'
    javadocDeps "org.conscrypt:conscrypt-android:${conscrypt}"
    javadocDeps "com.nimbusds:nimbus-jose-jwt:${nimbus}"

    testImplementation 'org.mockito:mockito-core:2.22.0'
    testImplementation 'org.jmockit:jmockit:1.41' //WARNING: don't update to 1.42. Put this line before junit
    testImplementation 'junit:junit:4.12'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs

    classpath += configurations.compile
    classpath += configurations.javadocDeps
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    // exclude generated files
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/*.kt' //TODO: Kotlin files causes Javadoc to crush. Don't add them for now
}

afterEvaluate {
    generateJavadocs.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}
generateJavadocsJar.dependsOn generateJavadocs

tasks.withType(Javadoc) {
    options.addBooleanOption('Xdoclint:none', true)
}

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

bintray {
    Properties properties = new Properties()
    File propertiesFile = project.rootProject.file('bintray.properties')
    if(propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
        user = properties.getProperty("bintray_user")
        key = properties.getProperty("bintray_key")

        pkg {
            repo = 'maven'
            name = 'com.fitpay'
            userOrg = 'fit-pay'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/fitpay/fitpay-android-sdk.git'
        }
        configurations = ['archives']
    }
}

// Test Logging
tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.3"
}
jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}
