buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'de.mobilej.unmock:UnMockPlugin:0.6.4'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven'
apply from: '../jacoco.gradle'
apply plugin: 'de.mobilej.unmock'

group = 'com.fitpay.android'
version = '0.4.39'
archivesBaseName = "android_sdk"

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'file://' + new File(System.getProperty('user.home'), 'LocalRepository').absolutePath) {
            }

            snapshotRepository(url: 'file://' + new File(System.getProperty('user.home'), 'LocalRepository/snapshots').absolutePath) {
            }

            pom.project {
                name 'android_sdk'
                packaging 'aar'
                description 'FitPay Android SDK'
                url 'https://github.com/fitpay/fitpay-android-sdk'

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/fitpay/fitpay-android-sdk/blob/develop/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'fitpay_developer'
                        name 'FitPay Developer'
                        email 'sdk@fit-pay.com'
                    }
                }
            }
        }
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 27
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    buildTypes.each {
        it.buildConfigField "String", 'SDK_VERSION', "\"ANDROID-" + version + "\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}

ext {
    supportLib = "27.0.2"
}

unMock {
    keepStartingWith "libcore."
    keepStartingWith "android.net.Uri"
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:support-annotations:${supportLib}"
    compile "com.android.support:appcompat-v7:${supportLib}"

    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'

    compile 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    compile 'com.squareup.okhttp3:okhttp:3.9.0'

    compile 'io.reactivex:rxjava:1.3.4'
    compile 'io.reactivex:rxandroid:1.2.1'

    compile 'me.alexrs:prefs:1.1.0'

    compile 'org.bouncycastle:bcprov-jdk15on:1.58'
    compile 'com.nimbusds:nimbus-jose-jwt:5.1'

    testCompile 'org.mockito:mockito-core:2.12.0'
    testCompile 'junit:junit:4.12'
    testCompile group: 'org.jmockit', name: 'jmockit', version: '1.37'
//    testCompile 'org.powermock:powermock-core:2.0.0-beta.5'
//    testCompile 'org.powermock:powermock-api-mockito2:2.0.0-beta.5'
//    testCompile 'org.powermock:powermock-module-junit4:2.0.0-beta.5'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath()
            .join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}
generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('bintray.properties').newDataInputStream())
    user = properties.getProperty("bintray_user")
    key = properties.getProperty("bintray_key")

    pkg {
        repo = 'maven'
        name = 'com.fitpay'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/fitpay/fitpay-android-sdk.git'
    }
    configurations = ['archives']
}

// Test Logging
tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}
